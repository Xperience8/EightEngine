#pragma once

#define DIRECTX_11_RENDERER

#ifdef DIRECTX_11_RENDERER
enum CpuAccessFlag
{
	NO_CPU_ACCESS = 0,
	CPU_ACCESS_WRITE = D3D11_CPU_ACCESS_WRITE,
	CPU_ACCESS_READ = D3D11_CPU_ACCESS_READ,
	FULL_CPU_ACCESS = CPU_ACCESS_READ | CPU_ACCESS_WRITE
};
enum BindFlag
{
	// Resource won't be binded into rendering pipeline
	NO_BIND = 0,
	BIND_VERTEX_BUFFER = D3D11_BIND_VERTEX_BUFFER,
	BIND_INDEX_BUFFER = D3D11_BIND_INDEX_BUFFER,
	BIND_CONSTANT_BUFFER = D3D11_BIND_CONSTANT_BUFFER,
	BIND_SHADER_RESOURCE = D3D11_BIND_SHADER_RESOURCE,
	BIND_UNORDERED_ACCESS = D3D11_BIND_UNORDERED_ACCESS,
	BIND_RENDER_TARGET = D3D11_BIND_RENDER_TARGET,
	BIND_DEPTH_STENCIL = D3D11_BIND_DEPTH_STENCIL
};
enum UsageFlag
{
	// GPU can read and write to the resource, CPU has no access
	USAGE_DEFAULT = D3D11_USAGE_DEFAULT,
	// GPU can only read resource, CPU has no access
	USAGE_IMMUTABLE = D3D11_USAGE_IMMUTABLE,
	// GPU can read resource, CPU can write to the resource(thus it can update it)
	USAGE_DYNAMIC = D3D11_USAGE_DYNAMIC,
	// CPU can read and write to the resource
	USAGE_STAGING = D3D11_USAGE_STAGING
};
enum FormatFlag
{
	FORMAT_UNKNOWN = DXGI_FORMAT::DXGI_FORMAT_UNKNOWN,
	FORMAT_R8G8B8A8_UINT = DXGI_FORMAT::DXGI_FORMAT_R8G8B8A8_UINT,
	FORMAT_R8G8B8A8_UNORM = DXGI_FORMAT::DXGI_FORMAT_R8G8B8A8_UNORM,
	FORMAT_R32_FLOAT = DXGI_FORMAT::DXGI_FORMAT_R32_FLOAT,
	FORMAT_R32G32_FLOAT = DXGI_FORMAT::DXGI_FORMAT_R32G32_FLOAT,
	FORMAT_R32G32B32_FLOAT = DXGI_FORMAT::DXGI_FORMAT_R32G32B32_FLOAT,
	FORMAT_R32G32B32A32_FLOAT = DXGI_FORMAT::DXGI_FORMAT_R32G32B32A32_FLOAT
};
enum ResourceDimension
{
	RESOURCE_DIMENSION_UNKNOWN = D3D11_RESOURCE_DIMENSION::D3D11_RESOURCE_DIMENSION_UNKNOWN,
	RESOURCE_DIMENSION_BUFFER = D3D11_RESOURCE_DIMENSION::D3D11_RESOURCE_DIMENSION_BUFFER,
	RESOURCE_DIMENSION_TEXTURE1D = D3D11_RESOURCE_DIMENSION::D3D11_RESOURCE_DIMENSION_TEXTURE1D,
	RESOURCE_DIMENSION_TEXTURE2D = D3D11_RESOURCE_DIMENSION::D3D11_RESOURCE_DIMENSION_TEXTURE2D,
	RESOURCE_DIMENSION_TEXTURE3D = D3D11_RESOURCE_DIMENSION::D3D11_RESOURCE_DIMENSION_TEXTURE3D
};
enum FilterType
{
	ANISOTROPIC_FILTER = D3D11_FILTER_ANISOTROPIC
};
enum TextureAddressMode
{
	TEXTURE_ADDRESS_MODE_WRAP = D3D11_TEXTURE_ADDRESS_WRAP,
	TEXTURE_ADDRESS_MODE_BORDER = D3D11_TEXTURE_ADDRESS_BORDER,
	TEXTURE_ADDRESS_MODE_CLAMP = D3D11_TEXTURE_ADDRESS_CLAMP
};
enum FillMode
{
	FILL_SOLID = D3D11_FILL_MODE::D3D11_FILL_SOLID,
	FILL_WIREFRAME = D3D11_FILL_MODE::D3D11_FILL_WIREFRAME
};
enum CullMode
{
	CULL_NONE = D3D11_CULL_MODE::D3D11_CULL_NONE,
	CULL_BACK = D3D11_CULL_MODE::D3D11_CULL_BACK,
	CULL_FRONT = D3D11_CULL_MODE::D3D11_CULL_FRONT
};
enum Blend
{
	BLEND_ZERO = D3D11_BLEND::D3D11_BLEND_ZERO,
	BLEND_ONE = D3D11_BLEND::D3D11_BLEND_ONE,
	BLEND_SRC_ALPHA = D3D11_BLEND::D3D11_BLEND_SRC_ALPHA,
	BLEND_INV_SRC_ALPHA = D3D11_BLEND::D3D11_BLEND_INV_SRC_ALPHA
};
enum BlendOp
{
	BLEND_OP_ADD = D3D11_BLEND_OP::D3D11_BLEND_OP_ADD,
	BLEND_OP_SUBTRACT = D3D11_BLEND_OP::D3D11_BLEND_OP_SUBTRACT,
	BLEND_OP_REV_SUBTRACT = D3D11_BLEND_OP::D3D11_BLEND_OP_REV_SUBTRACT,
	BLEND_OP_MIN = D3D11_BLEND_OP::D3D11_BLEND_OP_MIN,
	BLEND_OP_MAX = D3D11_BLEND_OP::D3D11_BLEND_OP_MAX
};
enum ColorWriteEnable
{
	COLOR_WRITE_ENABLE_RED = D3D11_COLOR_WRITE_ENABLE::D3D11_COLOR_WRITE_ENABLE_RED,
	COLOR_WRITE_ENABLE_GREEN = D3D11_COLOR_WRITE_ENABLE::D3D11_COLOR_WRITE_ENABLE_GREEN,
	COLOR_WRITE_ENABLE_BLUE = D3D11_COLOR_WRITE_ENABLE::D3D11_COLOR_WRITE_ENABLE_BLUE,
	COLOR_WRITE_ENABLE_ALPHA = D3D11_COLOR_WRITE_ENABLE::D3D11_COLOR_WRITE_ENABLE_ALPHA,
	COLOR_WRITE_ENABLE_ALL = D3D11_COLOR_WRITE_ENABLE::D3D11_COLOR_WRITE_ENABLE_ALL
};
enum DepthWriteMask
{
	DEPTH_WRITE_MASK_ZERO = D3D11_DEPTH_WRITE_MASK::D3D11_DEPTH_WRITE_MASK_ZERO,
	DEPTH_WRITE_MASK_ALL = D3D11_DEPTH_WRITE_MASK::D3D11_DEPTH_WRITE_MASK_ALL
};
enum ComparisonFunc
{
	COMPARISON_NEVER = D3D11_COMPARISON_FUNC::D3D11_COMPARISON_NEVER,
	COMPARISON_LESS = D3D11_COMPARISON_FUNC::D3D11_COMPARISON_LESS,
	COMPARISON_EQUAL = D3D11_COMPARISON_FUNC::D3D11_COMPARISON_EQUAL,
	COMPARISON_LESS_EQUAL = D3D11_COMPARISON_FUNC::D3D11_COMPARISON_LESS_EQUAL,
	COMPARISON_GREATER = D3D11_COMPARISON_FUNC::D3D11_COMPARISON_GREATER,
	COMPARISON_NOT_EQUAL = D3D11_COMPARISON_FUNC::D3D11_COMPARISON_NOT_EQUAL,
	COMPARISON_GREATER_EQUAL = D3D11_COMPARISON_FUNC::D3D11_COMPARISON_GREATER_EQUAL,
	COMPARISON_ALWAYS = D3D11_COMPARISON_FUNC::D3D11_COMPARISON_ALWAYS
};
enum StencilOp
{
	STENCIL_OP_KEEP = D3D11_STENCIL_OP::D3D11_STENCIL_OP_KEEP,
	STENCIL_OP_ZERO = D3D11_STENCIL_OP::D3D11_STENCIL_OP_ZERO,
	STENCIL_OP_REPLACE = D3D11_STENCIL_OP::D3D11_STENCIL_OP_REPLACE,
	STENCIL_OP_INCR_SAT = D3D11_STENCIL_OP::D3D11_STENCIL_OP_INCR_SAT,
	STENCIL_OP_DECR_SAT = D3D11_STENCIL_OP::D3D11_STENCIL_OP_DECR_SAT,
	STENCIL_OP_INVERT = D3D11_STENCIL_OP::D3D11_STENCIL_OP_INVERT,
	STENCIL_OP_INCR = D3D11_STENCIL_OP::D3D11_STENCIL_OP_INCR,
	STENCIL_OP_DECR = D3D11_STENCIL_OP::D3D11_STENCIL_OP_DECR
};
enum InputClassification
{
	INPUT_PER_VERTEX_DATA = D3D11_INPUT_CLASSIFICATION::D3D11_INPUT_PER_VERTEX_DATA,
	INPUT_PER_INSTANCE_DATA = D3D11_INPUT_CLASSIFICATION::D3D11_INPUT_PER_INSTANCE_DATA
};
enum PrimitiveTopologyType
{
	PRIMITIVE_TOPOLOGY_POINTLIST = D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
	PRIMITIVE_TOPOLOGY_TRIANGLELIST = D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
	PRIMITIVE_TOPOLOGY_4_CONTROL_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY::D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST
};
#endif